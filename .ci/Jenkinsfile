pipeline {
    environment {
        registry = "https://docker.mjamsek.com"
        registryCredential = "nexus-username"
        dockerImageTag = "docker.mjamsek.com/sample-repo"
        dockerImage = ""
        version = ""
        commitAuthor = ""
    }

    agent any

    tools {
        nodejs "node-12"
    }

    stages {
        stage("Cloning git") {
            steps {
                git branch: "master",
                        credentialsId: "github-username",
                        url: "https://github.com/Jamsek-m/sample-repo.git"
            }
        }
        stage("Set environment variables") {
            steps {
                script {
                    version = readFile('VERSION').trim()
                    sh "git --no-pager show -s --format='%ae' > COMMIT_INFO"
                    commitAuthor = readFile("COMMIT_INFO").trim()
                }
            }
        }
        stage("Install dependencies") {
            steps {
                withNPM(npmrcConfig: 'npm-public-file') {
                    sh "npm install"
                    sh "npm run link"
                }
            }
        }
        stage("Build project") {
            steps {
                sh "npm run build"
            }
        }
        stage("Deploy library") {
            steps {
                withNPM(npmrcConfig: 'npm-snapshot-file') {
                    sh "npm run publish:lib"
                }
            }
        }
        stage("Build docker image") {
            steps {
                dir("app") {
                    withCredentials([string(credentialsId: 'npm-public-token', variable: 'NEXUS_NPM')]) {
                        script {
                            dockerImage = docker.build(dockerImageTag, "--build-arg NPM_TOKEN=$NEXUS_NPM .")
                        }
                    }
                }
            }
        }
        stage("Publishing docker image") {
            steps {
                script {
                    docker.withRegistry(registry, registryCredential) {
                        dockerImage.push("$version")
                        dockerImage.push("latest")
                    }
                }
            }
        }
        stage("Cleanup docker images") {
            steps {
                sh "docker rmi $dockerImageTag:$version"
                sh "docker rmi $dockerImageTag:latest"
            }
        }
    }
    post {
        success {
            slackSend (color: '#00FF00', message: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' from ${commitAuthor} (${env.BUILD_URL})")
        }
        failure {
            slackSend (color: '#FF0000', message: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' from ${commitAuthor} (${env.BUILD_URL})")
        }
    }
}
